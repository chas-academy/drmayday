// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var MySql2 = require("bs-mysql2/lib/js/src/MySql2.bs.js");
var DateFns = require("date-fns");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Slack$Drmayday = require("./Slack.bs.js");
var Config$Drmayday = require("../Config.bs.js");

function formatTimestamp(timestamp) {
  var dateAdded = new Date(timestamp);
  var now = new Date(Date.now());
  return DateFns.distanceInWords(dateAdded, now) + " ago";
}

var Utils = /* module */[/* formatTimestamp */formatTimestamp];

function helpItem(json) {
  var match = Json_decode.field("finished", Json_decode.$$int, json);
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* userId */Json_decode.field("user_id", Json_decode.string, json),
          /* description */Json_decode.field("description", Json_decode.string, json),
          /* timeCreated */Json_decode.field("time_created", Json_decode.$$float, json),
          /* timeClosed */Json_decode.optional((function (param) {
                  return Json_decode.field("time_closed", Json_decode.$$float, param);
                }), json),
          /* finished */match === 1
        ];
}

var Decode = /* module */[/* helpItem */helpItem];

function connect() {
  return MySql2.Connection[/* connect */0](Config$Drmayday.db[/* host */0], 3306, Config$Drmayday.db[/* user */2], Config$Drmayday.db[/* password */3], Config$Drmayday.db[/* name */1], /* () */0);
}

function addHelpItem(userId, description, sendMessage) {
  var conn = connect(/* () */0);
  var timestamp = Date.now();
  var params = Curry._1(MySql2.Params[/* named */0], Json_encode.object_(/* :: */[
            /* tuple */[
              "user_id",
              userId
            ],
            /* :: */[
              /* tuple */[
                "description",
                description
              ],
              /* :: */[
                /* tuple */[
                  "time_created",
                  timestamp
                ],
                /* :: */[
                  /* tuple */[
                    "finished",
                    false
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]));
  return MySql2.execute(conn, "INSERT INTO help_items (user_id, description, time_created, finished) VALUES (:user_id, :description, :time_created, :finished)", Js_primitive.some(params), (function (res) {
                var variant = res[0];
                if (variant !== 516394780) {
                  if (variant >= 1035765577) {
                    console.log("MUTATION: ", res[1]);
                  } else {
                    console.log("ERROR: ", res[1]);
                  }
                } else {
                  console.log("SELECT: ", res[1]);
                  Curry._1(sendMessage, "Cool, I've added you to the queue" + Slack$Drmayday.Utils[/* encodeUserId */0](userId));
                }
                return MySql2.Connection[/* close */2](conn);
              }));
}

function closeHelpItem(itemId) {
  var conn = connect(/* () */0);
  var timeClosed = Date.now();
  var params = Curry._1(MySql2.Params[/* named */0], Json_encode.object_(/* :: */[
            /* tuple */[
              "id",
              itemId
            ],
            /* :: */[
              /* tuple */[
                "time_closed",
                timeClosed
              ],
              /* :: */[
                /* tuple */[
                  "finished",
                  true
                ],
                /* [] */0
              ]
            ]
          ]));
  return MySql2.execute(conn, "UPDATE help_items SET time_closed = :time_closed, finished = :finished WHERE id = :id", Js_primitive.some(params), (function (res) {
                var variant = res[0];
                if (variant !== 516394780) {
                  if (variant >= 1035765577) {
                    console.log("MUTATION: ", res[1]);
                  } else {
                    console.log("ERROR: ", res[1]);
                  }
                } else {
                  console.log("SELECT: ", res[1]);
                }
                return MySql2.Connection[/* close */2](conn);
              }));
}

function getFirstHelpItem(sendMessage, sendMessageWithAttachments) {
  var conn = connect(/* () */0);
  return MySql2.execute(conn, "SELECT * from help_items WHERE finished = false ORDER BY time_created DESC LIMIT 1", undefined, (function (res) {
                var variant = res[0];
                if (variant !== 516394780) {
                  if (variant >= 1035765577) {
                    console.log("MUTATION: ", res[1]);
                  } else {
                    console.log("ERROR: ", res[1]);
                  }
                } else {
                  var rows = Belt_Array.map(MySql2.Select[/* rows */6](res[1]), helpItem);
                  var match = rows.length;
                  if (match !== 0) {
                    Curry._2(sendMessageWithAttachments, "Remove " + (Slack$Drmayday.Utils[/* encodeUserId */0](Caml_array.caml_array_get(rows, 0)[/* userId */1]) + " from the queue?"), Slack$Drmayday.Message[/* confirmQueueRemoval */2](Caml_array.caml_array_get(rows, 0)[/* id */0]));
                  } else {
                    Curry._1(sendMessage, "There's no one next in line! Nice work!");
                  }
                }
                return MySql2.Connection[/* close */2](conn);
              }));
}

function getOpenItems(sendMessage) {
  var conn = connect(/* () */0);
  return MySql2.execute(conn, "SELECT * from help_items WHERE finished = false ORDER BY time_created DESC", undefined, (function (res) {
                var variant = res[0];
                if (variant !== 516394780) {
                  if (variant >= 1035765577) {
                    console.log("MUTATION: ", res[1]);
                  } else {
                    console.log("ERROR: ", res[1]);
                  }
                } else {
                  var rows = Belt_Array.map(MySql2.Select[/* rows */6](res[1]), helpItem);
                  var match = rows.length;
                  Curry._1(sendMessage, match !== 0 ? "*Here's the current list of patients*\n\n" + Belt_Array.mapWithIndex(rows, (function (i, param) {
                                  return "*" + (String(i + 1 | 0) + ("*. " + (Slack$Drmayday.Utils[/* encodeUserId */0](param[/* userId */1]) + (" - " + (param[/* description */2] + (" - " + formatTimestamp(param[/* timeCreated */3])))))));
                                })).join("\n") : "Woot. No one on the help list? Nice work!");
                }
                return MySql2.Connection[/* close */2](conn);
              }));
}

function hasUnfinishedHelpItem(userId) {
  var conn = connect(/* () */0);
  var params = Curry._1(MySql2.Params[/* named */0], Json_encode.object_(/* :: */[
            /* tuple */[
              "user_id",
              userId
            ],
            /* [] */0
          ]));
  return MySql2.execute(conn, "SELECT * FROM help_items WHERE user_id = :user_id AND finished = false", Js_primitive.some(params), (function (res) {
                var variant = res[0];
                if (variant !== 516394780) {
                  if (variant >= 1035765577) {
                    console.log("MUTATION: ", res[1]);
                  } else {
                    console.log("ERROR: ", res[1]);
                  }
                } else {
                  console.log("SELECT: ", res[1]);
                }
                return MySql2.Connection[/* close */2](conn);
              }));
}

exports.Utils = Utils;
exports.Decode = Decode;
exports.connect = connect;
exports.addHelpItem = addHelpItem;
exports.closeHelpItem = closeHelpItem;
exports.getFirstHelpItem = getFirstHelpItem;
exports.getOpenItems = getOpenItems;
exports.hasUnfinishedHelpItem = hasUnfinishedHelpItem;
/* MySql2 Not a pure module */
