// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Axios = require("axios");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Config$Drmayday = require("../Config.bs.js");
var Commands$Drmayday = require("../Commands.bs.js");

function sendPayload(payload) {
  var request = {
    url: "https://slack.com/api/chat.postMessage",
    method: "POST",
    headers: {
      Authorization: "Bearer " + Config$Drmayday.slackToken
    },
    data: payload
  };
  return Axios.request(request).then((function (posted) {
                return Promise.resolve(posted);
              }));
}

function isAdmin(userId) {
  var request = {
    url: "https://slack.com/api/users.info?user=" + userId,
    method: "GET",
    headers: {
      Authorization: "Bearer " + Config$Drmayday.slackToken
    }
  };
  return Axios.request(request).then((function (user) {
                  return Promise.resolve(user);
                })).then((function (result) {
                return Promise.resolve(result.data.user.is_admin);
              }));
}

var IO = /* module */[
  /* sendPayload */sendPayload,
  /* isAdmin */isAdmin
];

function decodeType(subTypeString) {
  if (subTypeString === "bot_message") {
    return /* Bot */0;
  } else {
    return /* Human */1;
  }
}

function decode(json) {
  var match = Json_decode.optional((function (param) {
          return Json_decode.field("subtype", Json_decode.string, param);
        }), json);
  if (match !== undefined) {
    return decodeType(match);
  } else {
    return /* Human */1;
  }
}

var SubType = /* module */[
  /* decodeType */decodeType,
  /* decode */decode
];

function parseQuery(text) {
  return text.split(" ").slice(1).join(" ");
}

function decodeEvent(json) {
  var match = Json_decode.optional((function (param) {
          return Json_decode.field("text", Json_decode.string, param);
        }), json);
  return /* record */[
          /* channel */Json_decode.field("channel", Json_decode.string, json),
          /* command */Commands$Drmayday.decodeCommand(Belt_Option.getWithDefault(Json_decode.optional((function (param) {
                          return Json_decode.field("text", Json_decode.string, param);
                        }), json), "")),
          /* subtype */decode(json),
          /* text */match !== undefined ? parseQuery(match) : "",
          /* user */Json_decode.field("user", Json_decode.string, json)
        ];
}

function decodeType$1(eventString) {
  switch (eventString) {
    case "event_callback" : 
        return /* EventCallback */0;
    case "url_verification" : 
        return /* UrlVerification */1;
    default:
      return /* UnknownEvent */2;
  }
}

function decodeEventPayload(json) {
  return /* record */[
          /* event */Json_decode.optional((function (param) {
                  return Json_decode.field("event", decodeEvent, param);
                }), json),
          /* eventType */decodeType$1(Json_decode.field("type", Json_decode.string, json))
        ];
}

function decodeEventType(json) {
  return decodeType$1(Json_decode.field("type", Json_decode.string, json));
}

var Event = /* module */[
  /* parseQuery */parseQuery,
  /* decodeEvent */decodeEvent,
  /* decodeType */decodeType$1,
  /* decodeEventPayload */decodeEventPayload,
  /* decodeEventType */decodeEventType
];

function decodeAction(action) {
  if (action === "remove") {
    return /* Remove */0;
  } else {
    return /* UnknownAction */1;
  }
}

function decodeType$2(actionString) {
  if (actionString === "interactive_message") {
    return /* InteractiveMessage */0;
  } else {
    return /* UnknownAction */1;
  }
}

function actionItemToRecord(json) {
  return /* record */[
          /* action */decodeAction(Json_decode.field("name", Json_decode.string, json)),
          /* itemId */Json_decode.optional((function (param) {
                  return Json_decode.field("value", Json_decode.string, param);
                }), json)
        ];
}

function actionToRecord(json) {
  return /* record */[
          /* actions */Json_decode.field("actions", (function (param) {
                  return Json_decode.array(actionItemToRecord, param);
                }), json),
          /* callbackId */Json_decode.field("callback_id", Json_decode.string, json)
        ];
}

function decodeActionBody(json) {
  return actionToRecord(Json.parseOrRaise(Json_decode.field("payload", Json_decode.string, json)));
}

function decodeActionType(json) {
  return decodeType$2(Json_decode.field("type", Json_decode.string, Json.parseOrRaise(Json_decode.field("payload", Json_decode.string, json))));
}

var Action = /* module */[
  /* decodeAction */decodeAction,
  /* decodeType */decodeType$2,
  /* actionItemToRecord */actionItemToRecord,
  /* actionToRecord */actionToRecord,
  /* decodeActionBody */decodeActionBody,
  /* decodeActionType */decodeActionType
];

function mapToEvent(json) {
  return /* record */[
          /* channel */Json_decode.field("channel_id", Json_decode.string, json),
          /* command : Help */0,
          /* subtype */decode(json),
          /* text */Json_decode.field("text", Json_decode.string, json),
          /* user */Json_decode.field("user_id", Json_decode.string, json)
        ];
}

var Mayday = /* module */[/* mapToEvent */mapToEvent];

function decode$1(json) {
  return /* record */[
          /* challenge */Json_decode.field("challenge", Json_decode.string, json),
          /* token */Json_decode.field("token", Json_decode.string, json)
        ];
}

function challengeToken(body) {
  return decode$1(body)[/* challenge */0];
}

var Verification = /* module */[
  /* decode */decode$1,
  /* challengeToken */challengeToken
];

function send(_, message) {
  return sendPayload({
              channel: Config$Drmayday.slackBotId,
              text: message,
              mrkdwn: true
            });
}

function sendWithAttachments(channel, message, attachments) {
  return sendPayload({
              channel: channel,
              text: message,
              attachments: attachments,
              mrkdwn: true
            });
}

function confirmQueueRemoval(itemId) {
  return "[\n    {\n      \"fallback\": \"Seems like your interface does not suppor attachments.\",\n      \"callback_id\": \"confirm_finished\",\n      \"color\": \"#3AA3E3\",\n      \"attachment_type\": \"default\",\n      \"actions\": [\n        {\n          \"name\": \"remove\",\n          \"text\": \"Yes\",\n          \"type\": \"button\",\n          \"value\": " + (String(itemId) + ",\n        },\n        {\n          \"name\": \"keep\",\n          \"text\": \"No\",\n          \"type\": \"button\",\n          \"value\": \"no\",\n        },\n      ],\n    },\n  ]\n  ");
}

var helpMessage = $$String.concat("\n", /* :: */[
      "*Sure, here's the list of the all the current commands! :tada:*\n",
      /* :: */[
        "\n*Student:*\n",
        /* :: */[
          "```",
          /* :: */[
            "mayday <Description> ___________________ Call for a teacher.",
            /* :: */[
              "queue __________________________________ Show the list of patients",
              /* :: */[
                "```",
                /* :: */[
                  "\n*Teacher:*\n",
                  /* :: */[
                    "```",
                    /* :: */[
                      "next ___________________________________ Get the next in line",
                      /* :: */[
                        "queue __________________________________ Show the list of patients",
                        /* :: */[
                          "```",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var Message = /* module */[
  /* send */send,
  /* sendWithAttachments */sendWithAttachments,
  /* confirmQueueRemoval */confirmQueueRemoval,
  /* helpMessage */helpMessage
];

function encodeUserId(id) {
  return "<@" + (id + ">");
}

var Utils = /* module */[/* encodeUserId */encodeUserId];

exports.IO = IO;
exports.SubType = SubType;
exports.Event = Event;
exports.Action = Action;
exports.Mayday = Mayday;
exports.Verification = Verification;
exports.Message = Message;
exports.Utils = Utils;
/* helpMessage Not a pure module */
