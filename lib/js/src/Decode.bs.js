// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

function decodeEventType(eventString) {
  switch (eventString) {
    case "event_callback" : 
        return /* EventCallback */0;
    case "url_verification" : 
        return /* UrlVerification */1;
    default:
      return /* UnknownEvent */2;
  }
}

function decodeActionType(actionString) {
  if (actionString === "interactive_message") {
    return /* InteractiveMessage */0;
  } else {
    return /* UnknownAction */1;
  }
}

function decodeSubType(subTypeString) {
  if (subTypeString === "bot_message") {
    return /* Bot */0;
  } else {
    return /* Human */1;
  }
}

var Commands = /* module */[
  /* decodeEventType */decodeEventType,
  /* decodeActionType */decodeActionType,
  /* decodeSubType */decodeSubType
];

function decodeChallenge(json) {
  return /* record */[
          /* challenge */Json_decode.field("challenge", Json_decode.string, json),
          /* token */Json_decode.field("token", Json_decode.string, json)
        ];
}

function decodeEventType$1(json) {
  return decodeEventType(Json_decode.field("type", Json_decode.string, json));
}

function decodeActionType$1(json) {
  return decodeActionType(Json_decode.field("type", Json_decode.string, JSON.parse(Json_decode.field("payload", Json_decode.string, json))));
}

function decodeVerification(json) {
  return /* record */[
          /* challenge */Json_decode.field("challenge", Json_decode.string, json),
          /* token */Json_decode.field("token", Json_decode.string, json)
        ];
}

function decodeSubtype(json) {
  return decodeSubType(Json_decode.field("subtype", Json_decode.string, json));
}

exports.Commands = Commands;
exports.decodeChallenge = decodeChallenge;
exports.decodeEventType = decodeEventType$1;
exports.decodeActionType = decodeActionType$1;
exports.decodeVerification = decodeVerification;
exports.decodeSubtype = decodeSubtype;
/* No side effect */
